#status bar
set -g status-interval 1
set -g status-justify centre # center align window list
set -g status-left-length 20
set -g status-right-length 140
set -g status-left '#[fg=green]#H #[fg=black]â€¢ #[fg=green,bright]#(uname -r | cut -c 1-6)#[default]'
set -g status-right '#[fg=green,bg=black,bright]#(tmux-mem-cpu-load -i 2 -g 0 -m 0 -a 0) #[fg=red,dim]#(uptime | cut -f 4-5 -d " " | cut -f 1 -d ",") #[fg=white]%a %l:%M:%S %p#[default] #[fg=blue]%m-%d-%Y'

# default statusbar colors
set -g status-fg white
set -g status-bg default
set -g status-style bright

# default window title colors
set -g mode-style bg=default,fg=white

# active window title colors
#set-window-option -g window-status-style fg=white,bg=default
set-window-option -g window-status-current-style fg=white,bg=red

# C-b is not acceptable -- Vim uses it
set-option -g prefix C-a
bind-key C-a last-window

# Start numbering at 1
set -g base-index 1

# Allows for faster key repetition
set -s escape-time 0

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Allows us to use C-a a <command> to send commands to a TMUX session inside
# another TMUX session
bind-key a send-prefix

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# Vi copypaste mode
set-window-option -g mode-keys vi
#bind-key -t vi-copy 'v' begin-selection
#bind-key -t vi-copy 'y' copy-selection

# hjkl pane traversal
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# resize with some HJKL
bind  J resize-pane -D 5
bind  K resize-pane -U 5
bind  H resize-pane -L 5
bind  L resize-pane -R 5

#list sessions, because I overwrite with movement
bind S list-sessions

# auto window rename
set-window-option -g automatic-rename

# rm mouse mode fail by default
set -g mouse off

# Toggle mouse on with ^A m
bind m \
	set -g mouse on \;\
  display 'Mouse: ON'

# Toggle mouse off with ^A M
bind M \
	set -g mouse off \;\
  display 'Mouse: OFF'

# color
set -g default-terminal  "screen-256color"

# splitting
bind | split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# pane movement
bind-key g command-prompt -p "get pane from:"  "join-pane -s '%%'"
bind-key s command-prompt -p "send pane to:"  "join-pane -t '%%'"

# just zsh things
#set-option -g default-shell /usr/bin/zsh
set-option -g automatic-rename off

# panes
#set -g pane-border-bg colour0
#set -g pane-border-fg colour1
#set -g pane-active-border-bg colour0
set-option -g pane-active-border-style fg=colour50

